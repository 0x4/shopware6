variables:
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: "tcp://docker:2375"
    MYSQL_ROOT_PASSWORD: app
    WEB_DOCUMENT_ROOT: $CI_PROJECT_DIR/development/public
    GIT_STRATEGY: clone

stages:
    - Static analyzes
    - Testing
    - E2E
    - Build
    - Deploy

default:
    image: shopware/development:latest
    before_script:
        - zip -rq platform.zip .
        - git clone http://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.shopware.com/shopware/6/product/development.git
        - unzip -q platform.zip -d development/platform/
        - cd development
        - if [ "$(git ls-remote origin $CI_COMMIT_REF_NAME | wc -l)" == "true" ]; then git checkout $CI_COMMIT_REF_NAME; fi
        - cp -v dev-ops/gitlab/.psh.yaml.override .
        - /entrypoint supervisord > /dev/null 2>&1 &

# Stage: static

Javascript analyze:
    stage: Static analyzes
    before_script: []
    script:
        - cd src/Administration/Resources
        - npm clean-install
        - npm run lerna -- bootstrap
        - cd administration
        - PROJECT_ROOT=$(pwd) node_modules/.bin/eslint --ext .js,.vue --format junit src test > eslint.junit.xml
    artifacts:
        reports:
            junit: src/Administration/Resources/administration/eslint.junit.xml

PHP analyze:
    stage: Static analyzes
    before_script: []
    script:
        - composer install --no-interaction --optimize-autoloader --no-suggest --no-scripts
        - php bin/phpstan.phar analyze --level 5 --configuration phpstan.neon src
        - php bin/php-cs-fixer.phar fix --dry-run -v --allow-risky=yes --format=junit src > php-cs-fixer.xml
        - php bin/generate-composer.php
    artifacts:
        reports:
            junit: php-cs-fixer.xml

PHPUnit (MySQL):
    stage: Testing
    services:
        -   name: mysql:5.7
            alias: mysql
        -   name: elastic/elasticsearch:7.1.1
            alias: elasticsearch
            command: [ "bin/elasticsearch", "-Expack.security.enabled=false", "-Ediscovery.type=single-node" ]
    script:
        - ./psh.phar init
        - ./psh.phar unit
    coverage: '/^\s*Lines:\s*(\d+(?:\.\d+)?%)/'
    artifacts:
        paths:
            - development/build/artifacts/phpunit.clover.xml
        reports:
            junit: development/build/artifacts/phpunit.junit.xml

PHPUnit (MariaDB):
    stage: Testing
    services:
        -   name: mariadb:10.3
            alias: mysql
        -   name: elastic/elasticsearch:7.1.1
            alias: elasticsearch
            command: [ "bin/elasticsearch", "-Expack.security.enabled=false", "-Ediscovery.type=single-node" ]
    script:
        - ./psh.phar init
        - ./psh.phar unit
    coverage: '/^\s*Lines:\s*(\d+(?:\.\d+)?%)/'
    artifacts:
        reports:
            junit: development/build/artifacts/phpunit.junit.xml

Jest:
    stage: Testing
    services:
        -   name: mariadb:10.3
            alias: mysql
    script:
        - ./psh.phar init
        - ./psh.phar administration:install-dependencies
        - ./psh.phar administration:unit
    coverage: '/^\s?All files[^|]*\|[^|]*\s+([\d\.]+)/'
    artifacts:
        reports:
            junit: development/build/artifacts/clover.xml

Storefront:
    stage: E2E
    services:
        -   name: docker:dind
            alias: docker
        -   name: mariadb:10.3
            alias: mysql
    dependencies: []
    script:
        - ./psh.phar init --APP_ENV="prod"
        - ./psh.phar storefront:init --APP_ENV="prod" --DB_NAME="shopware_e2e"
        - ./psh.phar e2e:dump-db --APP_ENV="prod"
        - chown -R 1000:1000 .
        - docker run --name cypress -d -t --add-host="docker.vm:$(hostname -I)" -e CYPRESS_baseUrl=http://docker.vm:8000 -v $(pwd)/vendor/shopware/platform/src/Storefront/Resources/e2e:/e2e-Storefront -v $(pwd):/app cypress/browsers:node10.11.0-chrome75
        - docker exec cypress npm clean-install --prefix /e2e-Storefront
        - forever start vendor/shopware/platform/src/Storefront/Resources/e2e/routes/cypress.js
        - docker exec cypress npx cypress run --project /e2e-Storefront --browser chrome --config baseUrl=http://docker.vm:8000
        - docker rm -f cypress
    artifacts:
        when: always
        paths:
            - development/build/artifacts/e2e/
        reports:
            junit: development/build/artifacts/e2e/*.xml

Administration:
    stage: E2E
    services:
        -   name: docker:dind
            alias: docker
        -   name: mariadb:10.3
            alias: mysql
    dependencies: []
    script:
        - ./psh.phar init --APP_ENV="prod"
        - ./psh.phar administration:init --APP_ENV="prod"
        - ./psh.phar storefront:init --APP_ENV="prod"
        - ./psh.phar e2e:dump-db --APP_ENV="prod"
        - chown -R 1000:1000 .
        - docker run --name cypress -d -t --add-host="docker.vm:$(hostname -I)" -e CYPRESS_baseUrl=http://docker.vm:8000 -v $(pwd)/vendor/shopware/platform/src/Administration/Resources/e2e:/e2e-Administration -v $(pwd):/app cypress/browsers:node10.11.0-chrome75
        - docker exec cypress npm clean-install --prefix /e2e-Administration
        - forever start vendor/shopware/platform/src/Administration/Resources/e2e/routes/cypress.js
        - docker exec cypress npx cypress run --project /e2e-Administration --browser chrome --config baseUrl=http://docker.vm:8000 --config numTestsKeptInMemory=0
        - docker rm -f cypress
    artifacts:
        when: always
        paths:
            - development/build/artifacts/e2e/
        reports:
            junit: development/build/artifacts/e2e/*.xml

Repository Split:
    stage: Deploy
    image: debian:buster-slim
    before_script: []
    dependencies: []
    only:
        - master
    environment:
        name: Github
        url: https://github.com/shopware
    script:
        - apt update && apt install -y wget git

        # download tool
        - wget https://github.com/splitsh/lite/releases/download/v1.0.1/lite_linux_amd64.tar.gz
        - tar xvfz lite_linux_amd64.tar.gz
        - chmod +x splitsh-lite

        # split repositories
        - >
            for pkg in Administration Docs Storefront Core Elasticsearch; do
              echo "Splitting ${pkg}"
              SHA1=`./splitsh-lite --prefix=src/$pkg/ --target=refs/heads/$pkg`
              git remote set-url origin https://bot:${PERSONAL_TOKEN}@gitlab.shopware.com/shopware/6/product/many-repositories/$(echo $pkg | awk '{print tolower($0)}').git
              git push origin $SHA1:master -f
            done

.Scrutinizer:
    stage: Deploy
    image: php:7.3-alpine
    allow_failure: true
    before_script: []
    only:
        - master
    dependencies:
        - PHPUnit (MySQL)
    script:
        - wget https://scrutinizer-ci.com/ocular.phar
        - php ocular.phar code-coverage:upload
            --repository="g/shopware/platform"
            --revision="$CI_COMMIT_SHA"
            --format=php-clover
            development/build/artifacts/phpunit.clover.xml

Component Library:
    stage: Build
    image: node:10.8
    before_script: []
    dependencies: []
    variables:
        PROJECT_ROOT: $CI_PROJECT_DIR
    only:
        - master
    environment:
        name: Component Library
        url: https://component-library.shopware.com
    script:
        - npm install --prefix src/Administration/Resources/
        - npm run --prefix src/Administration/Resources lerna -- bootstrap
        - npm install --prefix src/Administration/Resources/nuxt-component-library/
        - npm run --prefix src/Administration/Resources/nuxt-component-library/ generate
    artifacts:
        paths:
            - build/artifacts/component-library/

Upload Component Library:
    stage: Deploy
    image: python:latest
    before_script: []
    only:
        - master
    dependencies:
        - Component Library
    script:
        - pip install awscli
        - cd build/artifacts/component-library
        - aws s3 sync --delete --acl public-read . s3://shopware-ui-component-library-docs/
        - aws cloudfront create-invalidation --distribution-id E18U17118IAC82 --paths "/*"
